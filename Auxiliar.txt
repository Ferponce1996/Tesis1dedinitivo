estado

////create


import { Field, InputType } from "@nestjs/graphql";

@InputType()
export class CreateEstado{
    
    @Field({nullable:true})
    name: string;
}


////unique

import { Field, InputType } from "@nestjs/graphql";

@InputType()
export class UniqueEstado{
    
    @Field({nullable:true})
    id: number
    @Field({nullable:true})
    name: string;
}



//entities

import { Field, Int, ObjectType } from "@nestjs/graphql";

@ObjectType()
export class Estado {

    @Field(() => Int)
    id: number;
    @Field(() => String, { nullable: true })
    name: string | null;

}



///////////SERVICES


import { Inject, Injectable } from '@nestjs/common';
import { PrismaService } from 'src/prisma.service';
import { Estado, Prisma } from '@prisma/client';
import { PubSub } from 'graphql-subscriptions';


///https://docs.nestjs.com/recipes/prisma#use-prisma-client-in-your-nestjs-services

const pubSub = new PubSub();

@Injectable()
export class EstadoService {

    constructor(@Inject(PrismaService) private prisma: PrismaService) { 
        
    }
 
    suscription(){
      return pubSub.asyncIterator('estado');
    }


    async findOne(
      estadoWhereUniqueInput: Prisma.EstadoWhereUniqueInput,
    ): Promise<Estado | null> {
      return this.prisma.estado.findUnique({
        where: estadoWhereUniqueInput,
      });
    }
  
    async findAll(params: {
      skip?: number;
      take?: number;
      cursor?: Prisma.EstadoWhereUniqueInput;
      where?: Prisma.EstadoWhereInput;
      orderBy?: Prisma.EstadoOrderByWithRelationInput;
    }): Promise<Estado[]> {
      const { skip, take, cursor, where, orderBy } = params;
      return this.prisma.estado.findMany({
        skip,
        take,
        cursor,
        where,
        orderBy,
      });
    }
  
    async create(data: Prisma.EstadoCreateInput): Promise<Estado> {
      const newEstado= this.prisma.estado.create({
        data,
      });

      pubSub.publish('estado', { estado: newEstado });
      return newEstado
    }
  

    async update(params: {
      where: Prisma.EstadoWhereUniqueInput;
      data: Prisma.EstadoUpdateInput;
    }): Promise<Estado> {
      const { where, data } = params;
      return this.prisma.estado.update({
        data,
        where,
      });
    }
  
    async delete(where: Prisma.EstadoWhereUniqueInput): Promise<Estado> {
      return this.prisma.estado.delete({
        where,
      });
    }
}




///////////RESOLVERS

import { Args, Context, Mutation, Query, Resolver,Int, Subscription  } from '@nestjs/graphql';
import { EstadoService } from '../../services/estado/estado.service';
import { Inject } from '@nestjs/common';
import { Estado } from '../../entities/estado.entity';
import { promises } from 'dns';
import { CreateEstado } from '../../dtos/estados/create-estado.dto';
import { UniqueEstado } from '../../dtos/estados/unique-estado.dto';


@Resolver()
export class EstadoResolver {
    constructor(@Inject(EstadoService) private estadoService: EstadoService) { }


    @Mutation((returns) => Estado)
    async create(
        @Args("data") data: CreateEstado,
        @Context() ctx
    ): Promise<Estado> {
        return this.estadoService.create(data)

    }
    @Query((returns) => [Estado], { nullable: true })
    async allEstados(@Context() ctx) {
        return this.estadoService.findAll({});
    }


    /////////// editar

    @Mutation(() => Estado)
    updateEstado(@Args('updateEstadoInput') updateEstadoInput: UniqueEstado) {
        return this.estadoService.update({ where: { id: updateEstadoInput.id }, data: updateEstadoInput });
    }

    @Mutation(() => Estado)
    removeEstado(@Args('id', { type: () => Int }) id: number) {
        return this.estadoService.delete({id});
    }

    @Subscription((returns) => Estado,{name:'estado'})
    newEstado() {
        return this.estadoService.suscription();
  }
    @Query(() => Estado, { name: 'estado' })
    findOne(@Args('id', { type: () => Int }) id: number) {
        return this.estadoService.findOne({id});
    }


}



///////RESOLVER Test
import { Test, TestingModule } from '@nestjs/testing';
import { EstadoService } from './estado.service';

describe('EstadoService', () => {
  let service: EstadoService;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [EstadoService],
    }).compile();

    service = module.get<EstadoService>(EstadoService);
  });

  it('should be defined', () => {
    expect(service).toBeDefined();
  });
});



///////////////////AUTH module
import { EstadoService } from './services/estado/estado.service';
import { EstadoResolver } from './resolvers/estado/estado.resolver';

EstadoService, EstadoResolver,